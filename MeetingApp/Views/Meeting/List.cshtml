@model List<UserInfo>
@{
    ViewBag.Title = "Toplantı Katılım Listesi";
    Layout = "_Layout2";
}

<!-- Hero Section -->
<div class="hero-section fade-in">
    <div class="container">
        <h1 class="hero-title">Katılımcı Listesi</h1>
        <p class="hero-subtitle">Toplantıya katılacak tüm katılımcıları görüntüleyin</p>
    </div>
</div>

<main class="container">
    <!-- Search Bar -->
    <div class="search-container">
        <input type="text" id="searchInput" class="search-input" placeholder="Katılımcı ara...">
    </div>

    <!-- Stats Summary -->
    <div class="stats-container slide-in-left">
        <div class="stat-card">
            <div class="stat-number">@Model.Count</div>
            <div class="stat-label">Toplam Kayıt</div>
        </div>
        <div class="stat-card">
            <div class="stat-number">@Model.Count(u => u.WillAttend == true)</div>
            <div class="stat-label">Katılımcı</div>
        </div>
        <div class="stat-card">
            <div class="stat-number">@Model.Count(u => u.WillAttend == false)</div>
            <div class="stat-label">Katılmıyor</div>
        </div>
        <div class="stat-card">
            <div class="stat-number">@Model.Count(u => u.WillAttend == null)</div>
            <div class="stat-label">Belirsiz</div>
        </div>
    </div>

    <!-- Participants List -->
    <div class="row" id="participantsList">
        @foreach(var user in Model) {
            var statusClass = user.WillAttend == true ? "border-success" : 
                             user.WillAttend == false ? "border-danger" : "border-warning";
            var statusText = user.WillAttend == true ? "Katılıyor" : 
                            user.WillAttend == false ? "Katılmıyor" : "Belirsiz";
            var statusIcon = user.WillAttend == true ? "fa-check-circle text-success" : 
                            user.WillAttend == false ? "fa-times-circle text-danger" : "fa-question-circle text-warning";

            <div class="col-md-6 col-lg-4 mb-3 participant-card" data-name="@user.Name?.ToLower()">
                <div class="card meeting-card h-100 @statusClass">
                    <div class="card-body text-center">
                        <div class="mb-3 position-relative">
                            <i class="fas fa-user-circle fa-3x text-primary"></i>
                            <!-- YENİ: Favori Toggle Button -->
                            <button class="btn btn-sm position-absolute top-0 end-0 favorite-btn" 
                                    data-user-id="@user.Id" 
                                    data-is-favorite="@user.IsFavorite.ToString().ToLower()">
                                <i class="fas @(user.IsFavorite ? "fa-star text-warning" : "fa-star-o text-muted")"></i>
                            </button>
                        </div>
                        <h5 class="card-title">@user.Name</h5>
                        <p class="card-text text-muted mb-2">
                            <i class="fas fa-envelope me-2"></i>@user.Email
                        </p>
                        <p class="card-text text-muted mb-3">
                            <i class="fas fa-phone me-2"></i>@user.Phone
                        </p>
                        
                        <!-- YENİ: Kullanıcı Notu -->
                        @if (!string.IsNullOrEmpty(user.Note))
                        {
                            <div class="mb-3">
                                <div class="alert alert-info alert-sm py-2">
                                    <i class="fas fa-sticky-note me-2"></i>
                                    <small>@user.Note</small>
                                </div>
                            </div>
                        }
                        
                        <div class="mb-3">
                            <span class="badge bg-light text-dark border @statusClass">
                                <i class="fas @statusIcon me-1"></i>
                                @statusText
                            </span>
                        </div>
                        
                        <div class="d-flex gap-2 justify-content-center">
                            <a class="btn btn-custom btn-sm" href="/meeting/details/@user.Id">
                                <i class="fas fa-eye me-1"></i>Detay
                            </a>
                            <!-- YENİ: Not Ekleme Button -->
                            <button class="btn btn-outline-secondary btn-sm note-btn" 
                                    data-user-id="@user.Id" 
                                    data-user-name="@user.Name">
                                <i class="fas fa-edit me-1"></i>Not
                            </button>
                        </div>
                        
                        <!-- YENİ: Son Güncelleme Tarihi -->
                        <div class="mt-3">
                            <small class="text-muted">
                                <i class="fas fa-clock me-1"></i>
                                Son güncelleme: @user.LastUpdated.ToString("dd.MM.yyyy HH:mm")
                            </small>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>

    <!-- No Results Message -->
    <div id="noResults" class="text-center mt-5" style="display: none;">
        <div class="card meeting-card">
            <div class="card-body">
                <i class="fas fa-search fa-3x text-muted mb-3"></i>
                <h4>Arama sonucu bulunamadı</h4>
                <p class="text-muted">Farklı anahtar kelimeler deneyin</p>
            </div>
        </div>
    </div>
</main>

<!-- YENİ: Not Ekleme Modal -->
<div class="modal fade" id="noteModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Not Ekle</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="noteForm">
                    <input type="hidden" id="noteUserId">
                    <div class="mb-3">
                        <label class="form-label">Kullanıcı</label>
                        <input type="text" id="noteUserName" class="form-control" readonly>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Not</label>
                        <textarea id="noteText" class="form-control" rows="3" placeholder="Kullanıcı hakkında not ekleyin..."></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">İptal</button>
                <button type="button" class="btn btn-primary" id="saveNote">Kaydet</button>
            </div>
        </div>
    </div>
</div>

<script>
// Search functionality
document.getElementById('searchInput').addEventListener('input', function() {
    const searchTerm = this.value.toLowerCase();
    const participants = document.querySelectorAll('.participant-card');
    let visibleCount = 0;
    
    participants.forEach(card => {
        const name = card.dataset.name || '';
        if (name.includes(searchTerm)) {
            card.style.display = 'block';
            visibleCount++;
        } else {
            card.style.display = 'none';
        }
    });
    
    // Show/hide no results message
    const noResults = document.getElementById('noResults');
    if (visibleCount === 0 && searchTerm !== '') {
        noResults.style.display = 'block';
    } else {
        noResults.style.display = 'none';
    }
});

// YENİ: Favori Toggle Functionality
document.querySelectorAll('.favorite-btn').forEach(btn => {
    btn.addEventListener('click', function() {
        const userId = this.dataset.userId;
        const icon = this.querySelector('i');
        
        // AJAX ile favori durumunu değiştir
        fetch(`/meeting/toggle-favorite/${userId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Icon'u güncelle
                if (data.isFavorite) {
                    icon.className = 'fas fa-star text-warning';
                    this.dataset.isFavorite = 'true';
                } else {
                    icon.className = 'fas fa-star-o text-muted';
                    this.dataset.isFavorite = 'false';
                }
                
                // Başarı mesajı göster
                showToast('Favori durumu güncellendi!', 'success');
            }
        })
        .catch(error => {
            showToast('Bir hata oluştu!', 'error');
        });
    });
});

// YENİ: Not Ekleme Functionality
document.querySelectorAll('.note-btn').forEach(btn => {
    btn.addEventListener('click', function() {
        const userId = this.dataset.userId;
        const userName = this.dataset.userName;
        
        document.getElementById('noteUserId').value = userId;
        document.getElementById('noteUserName').value = userName;
        document.getElementById('noteText').value = '';
        
        const modal = new bootstrap.Modal(document.getElementById('noteModal'));
        modal.show();
    });
});

// YENİ: Not Kaydetme
document.getElementById('saveNote').addEventListener('click', function() {
    const userId = document.getElementById('noteUserId').value;
    const noteText = document.getElementById('noteText').value;
    
    if (noteText.trim() === '') {
        showToast('Lütfen bir not girin!', 'warning');
        return;
    }
    
    // AJAX ile notu kaydet
    fetch(`/meeting/update-note/${userId}`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ note: noteText })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            showToast('Not başarıyla kaydedildi!', 'success');
            
            // Modal'ı kapat
            const modal = bootstrap.Modal.getInstance(document.getElementById('noteModal'));
            modal.hide();
            
            // Sayfayı yenile
            setTimeout(() => location.reload(), 1000);
        }
    })
    .catch(error => {
        showToast('Bir hata oluştu!', 'error');
    });
});

// YENİ: Toast Mesajı Gösterme
function showToast(message, type = 'info') {
    const toastContainer = document.getElementById('toastContainer') || createToastContainer();
    
    const toast = document.createElement('div');
    toast.className = `toast align-items-center text-white bg-${type === 'success' ? 'success' : type === 'error' ? 'danger' : type === 'warning' ? 'warning' : 'info'} border-0`;
    toast.setAttribute('role', 'alert');
    toast.innerHTML = `
        <div class="d-flex">
            <div class="toast-body">${message}</div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
        </div>
    `;
    
    toastContainer.appendChild(toast);
    
    const bsToast = new bootstrap.Toast(toast);
    bsToast.show();
    
    // Toast kapanınca DOM'dan kaldır
    toast.addEventListener('hidden.bs.toast', () => {
        toast.remove();
    });
}

function createToastContainer() {
    const container = document.createElement('div');
    container.id = 'toastContainer';
    container.className = 'toast-container position-fixed top-0 end-0 p-3';
    container.style.zIndex = '9999';
    document.body.appendChild(container);
    return container;
}
</script>